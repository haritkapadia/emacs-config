#+TITLE: Emacs Literate Configuration
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

* Useful links
[[https://emacs.stackexchange.com/questions/13186/how-might-i-define-or-fake-a-mode-local-ex-command-with-evil]]

* Configuration
** About this file
This is an Emacs literate configuration template. It contains the basic structure
of a literate config along with some optimizations to ensure a fast load time.

** Org File Tweaks
There are a few tweaks included in this org file that make it a little easier to
work with.

*** Automatically Tangle
First there is a property defined on the file:

#+BEGIN_SRC :tangle no
header-args :tangle yes
#+END_SRC

This tells emacs to automatically tangle (include) all code blocks in this file when
generating the code for the config, unless the code block explicitly includes
=:tangle no= as the above code block does.

*** Visibility Settings
Next we have a property defined on the [[Configuration][Configuration]] heading that defines the visibility
that tells org to show it's direct children on startup. This way a clean outline of all
sub headings under Configuration is shown each time this file is opened in org-mode.

** Emacs Initialization
*** Settings
We're going to increase the gc-cons-threshold to a very high number to decrease the load and compile time.
We'll lower this value significantly after initialization has completed. We don't want to keep this value
too high or it will result in long GC pauses during normal usage.

#+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6))
#+END_SRC

Disable certain byte compiler warnings to cut down on the noise. This is a personal choice and can be removed
if you would like to see any and all byte compiler warnings.

#+BEGIN_SRC emacs-lisp
(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
#+END_SRC

*** Package Management
**** Package Settings
We're going to set the =load-path= ourselves and avoid calling =(package-initilize)= (for
performance reasons) so we need to set =package--init-file-ensured= to true to tell =package.el=
to not automatically call it on our behalf. Additionally we're setting
=package-enable-at-startup= to nil so that packages will not automatically be loaded for us since
=use-package= will be handling that.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-prefer-newer t
          package-user-dir "~/.emacs.d/elpa"
          package--init-file-ensured t
          package-enable-at-startup nil)

    (unless (file-directory-p package-user-dir)
      (make-directory package-user-dir t)))
#+END_SRC

**** Use-Package Settings
Tell =use-package= to always defer loading packages unless explicitly told otherwise. This speeds up
initialization significantly as many packages are only loaded later when they are explicitly used.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-defer t
        use-package-verbose t
        use-package-hook-name-suffix nil)
#+END_SRC

**** Manually Set Load Path
We're going to set the load path ourselves so that we don't have to call =package-initialize= at
runtime and incur a large performance hit. This load-path will actually be faster than the one
created by =package-initialize= because it appends the elpa packages to the end of the load path.
Otherwise any time a builtin package was required it would have to search all of third party paths
first.

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (setq load-path (append load-path (directory-files package-user-dir t "^[^.]" t))))
#+END_SRC

**** Initialize Package Management
Next we are going to require =package.el= and add our additional package archives, 'melpa' and 'org'.
Afterwards we need to initialize our packages and then ensure that =use-package= is installed, which
we promptly install if it's missing. Finally we load =use-package= and tell it to always install any
missing packages.

Note that this entire block is wrapped in =eval-when-compile=. The effect of this is to perform all
of the package initialization during compilation so that when byte compiled, all of this time consuming
code is skipped. This can be done because the result of byte compiling =use-package= statements results
in the macro being fully expanded at which point =use-package= isn't actually required any longer.

Since the code is automatically compiled during runtime, if the configuration hasn't already been
previously compiled manually then all of the package initialization will still take place at startup.

#+BEGIN_SRC emacs-lisp
  (setq personal-keybindings '())

  (eval-when-compile
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    (require 'bind-key)
    (setq use-package-always-ensure t))
#+END_SRC

** Timezone
Timezone is useful when exporting Org Mode to iCal format.

#+BEGIN_SRC emacs-lisp
  (setenv "TZ" "EDT")
#+END_SRC

** Packages
*** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :demand t)
#+END_SRC

*** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :demand t
    :config
    (which-key-mode))
#+END_SRC

*** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :demand t
    :config
    (global-undo-tree-mode))
#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :after undo-tree
    :demand t
    :init
    (setq evil-undo-system 'undo-tree
      evil-want-integration t
      evil-want-keybinding nil
      evil-move-beyond-eol t)
    :config
    (evil-mode 1)
    (global-set-key (kbd "C-SPC") nil)
    (evil-set-leader 'insert (kbd "C-SPC"))
    (evil-set-leader 'normal (kbd "SPC")))
#+END_SRC

*** Evil Collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :demand t
    :init
    (evil-collection-init))
#+END_SRC

*** Evil Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :demand t
    :after evil
    :config
    (global-evil-surround-mode 1))
#+END_SRC

*** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC

*** Ivy
Generic completion frontend.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :demand t
    :diminish ivy-mode
    :init
    (setq ivy-use-virtual-buffers t
          enable-recursive-minibuffers t
          ivy-count-format "(%d/%d) ")
    :config
    (ivy-mode)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

  (use-package amx
    :after ivy
    :demand t
    :init
    (setq amx-backend 'auto
          amx-save-file "~/.emacs.d/amx-items"
          amx-history-length 50
          amx-show-key-bindings t)
    :config
    (amx-mode 1))

  (use-package swiper
    :init
    (evil-define-key nil evil-motion-state-map
      "/" #'swiper-isearch
      "?" #'swiper-isearch-backward))

  (use-package ivy-rich
    :demand t
    :config
    (ivy-rich-mode 1))

  (use-package counsel
    :demand t
    :bind
    (("<f1> f" . counsel-describe-function)
     ("<f1> v" . counsel-describe-variable)
     ("<f1> o" . counsel-describe-symbol)
     ("<leader> f f" . #'counsel-find-file)
     ("M-x" . counsel-M-x)))

  (use-package counsel-projectile)
#+END_SRC

*** Magit
The magical git client. Let's load magit only when one of the several entry pont
functions we invoke regularly outside of magit is called.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status magit-blame magit-log-buffer-file magit-log-all))

  (defun git-commit-config ()
    (setq fill-column 72)
    (display-fill-column-indicator-mode))
  (add-hook 'git-commit-mode-hook #'git-commit-config)
#+END_SRC

*** Projectile
Projectile is a quick and easy project management package that "just works".

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :config
    (projectile-mode +1)
    (bind-keys :map projectile-mode-map
               ("<leader> p" . projectile-command-map)
               ("<leader> t T" . projectile-run-eshell)
               ("<leader> t S" . projectile-run-term)))
#+END_SRC

*** Org
Let's include a newer version of org-mode than the one that is built in. We're going
to manually remove the org directories from the load path, to ensure the version we
want is prioritized instead.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :pin org
    :defer t
    :init
    (setq-default org-adapt-indentation nil))

  (use-package org-evil)

  ;; Ensure ELPA org is prioritized above built-in org.
  (require 'cl)
  (setq load-path (remove-if (lambda (x) (string-match-p "org$" x)) load-path))
#+END_SRC

*** Persistent Scratch
#+BEGIN_SRC emacs-lisp
  (use-package persistent-scratch
    :demand t
    :config
    (persistent-scratch-setup-default))
#+END_SRC

*** Tree Sitter
#+BEGIN_SRC emacs-lisp
  (use-package tree-sitter
    :demand t
    :diminish tree-sitter-mode)

  (use-package tree-sitter-langs
    :after sage-shell-mode
    :demand t
    :init
    (mapc (lambda (el)
            (add-hook (intern (concat (symbol-name (car el)) "-hook"))
                      #'tree-sitter-mode))
          tree-sitter-major-mode-language-alist)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode))
#+END_SRC

*** Company with Company Box
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :demand t
    :init
    (add-hook 'after-init-hook #'global-company-mode)
    :bind
    (:map company-active-map
      ("C-M-i" . counsel-company)))

  (use-package company-box
    :hook (prog-mode-hook . company-box-mode))
#+END_SRC

*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :commands (yas/expand-snippet)
    :init
    (add-hook 'yas-minor-mode-hook #'yas-reload-all)
    (mapc (lambda (e) (add-hook e #'yas-minor-mode))
          '(prog-mode-hook
            latex-mode-hook
            org-mode-hook))
    (defun my/insert-yas-expand ()
      "Replace text in Yasnippet template."
      (let ((yas-indent-line 'fixed))
        (yas/expand-snippet (buffer-string) (point-min) (point-max))))
    (setq auto-insert 'other
          auto-insert-dictionary "~/.emacs.d/templates/"
          auto-insert-alist
          (mapcar (lambda (ext)
                    `((,(concat "\\." ext "\\'") .
                       [,(concat "template." ext) my/insert-yas-expand])))
                  '("tex" "el")))
    :config
    (add-to-list 'company-backends 'company-yasnippet))
#+END_SRC

** UI
*** Startup and shutdown
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        initial-scratch-message ""
        initial-major-mode #'org-mode)
  (add-hook 'kill-emacs-hook #'bookmark-save)
#+END_SRC

*** Backup management
#+BEGIN_SRC emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
          (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t   ; backup of a file the first time it is saved.
        backup-by-copying t   ; don't clobber symlinks
        version-control t     ; version numbers for backup files
        delete-old-versions t ; delete excess backup files silently
        kept-old-versions 5   ; oldest versions to keep when a new numbered backup is made
        kept-new-versions 5   ; newest versions to keep when a new numbered backup is made
        auto-save-default nil ; auto-save every buffer that visits a file
        delete-by-moving-to-trash t)
#+END_SRC

*** Toolbar, menubar, scrollbar
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
#+END_SRC

*** Smooth window management
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1
	mouse-wheel-scroll-amount '(1 ((shift) . 1))
	mouse-wheel-follow-mouse t
	mouse-wheel-progressive-speed nil
	frame-resize-pixelwise t)
#+END_SRC
*** Reduce noise
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
  (setq ring-bell-function #'ignore)
#+END_SRC
*** Color and font
#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :demand t
    :config
    (load-theme 'sanityinc-tomorrow-day t)
    (set-face-attribute 'default nil :foreground "#000000"))
#+END_SRC

*** Show Whitespace
#+BEGIN_SRC emacs-lisp
  (defun my/trailing-whitespace ()
    "Show trailing whitespace."
    (interactive)
    (setq show-trailing-whitespace t))

  (defun my/no-trailing-whitespace ()
    "Hide trailing whitespace."
    (interactive)
    (setq show-trailing-whitespace nil))
#+END_SRC

** Files and Programming
*** UTF everywhere
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (set-language-environment "UTF-8")
  (setq load-prefer-newer t)
#+END_SRC
*** Terminals
#+BEGIN_SRC emacs-lisp
  (bind-keys ("<leader> t t" . eshell)
             ("<leader> t s" . term))
#+END_SRC

*** Edit files
#+BEGIN_SRC emacs-lisp
  (defun my/find-init-org-file () (interactive) (find-file "~/.emacs.d/emacs.org"))
  (evil-define-key nil evil-normal-state-map
    (kbd "<leader> f F") #'find-alternate-file
    (kbd "<leader> f r") #'find-file-read-only
    (kbd "<leader> f q") #'read-only-mode
    (kbd "<leader> f e") #'my/find-init-org-file)
#+END_SRC

*** Pairs
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
  (show-paren-mode)
#+END_SRC

*** Prog Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'my/trailing-whitespace)
#+END_SRC
*** LSP
LSP requires language servers. Install the necessary ones from the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][Emacs LSP
page]]. While it may be tempting to install language servers for every available
mode, keep in mind that this usually requires external installs (e.g. from NPM
or Cargo).

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "<leader> o")
    :hook ((lsp-mode-hook . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package lsp-ui :commands lsp-ui-mode)
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)

  (use-package dap-mode)
#+END_SRC

*** Text
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  (setq-default indent-tabs-mode nil
		tab-width 4
		c-basic-offset 4
		cperl-indent-level 4
		fill-column 80)
#+END_SRC
*** JSON, YAML, Markdown
#+BEGIN_SRC emacs-lisp
  (use-package json-mode)
  (use-package yaml-mode)
  (use-package markdown-mode)
  (use-package edit-indirect :after markdown-mode)
#+END_SRC
*** Lisps
See [[https://github.com/noctuid/lispyville]] for Lispyville key themes.

#+BEGIN_SRC emacs-lisp
  (use-package lispy
    :init
    (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
    (add-hook 'common-lisp-mode-hook #'lispy-mode)
    (add-hook 'lisp-mode-hook #'lispy-mode)
    (add-hook 'racket-mode-hook #'lispy-mode))

  (use-package lispyville
    :init
    (add-hook 'lispy-mode-hook #'lispyville-mode)
    :config
    (lispyville-set-key-theme '(operators c-w text-objects atom-motions additional-motions slurp/barf-cp)))
#+END_SRC

**** Common Lisp
 #+BEGIN_SRC emacs-lisp
   (use-package slime
     :commands
     (slime)
     :config
     (setq inferior-lisp-program "sbcl")
     (slime-setup '(slime-fancy slime-company)))

   (use-package slime-company
     :after (slime company))
 #+END_SRC

**** Racket
 #+BEGIN_SRC emacs-lisp
   (use-package racket-mode)
 #+END_SRC

*** Python
#+BEGIN_SRC emacs-lisp
  (use-package pipenv
    :after python
    :init
    (setq pipenv-projectile-after-switch-function
      #'pipenv-projectile-after-switch-extended))

  (use-package pyvenv
    :after python)

  (use-package anaconda-mode
    :init
    (add-hook 'python-mode-hook #'anaconda-mode)
    (add-hook 'python-mode-hook #'anaconda-eldoc-mode)
    :config
    (bind-keys :map anaconda-mode-map ("C-M-i" . nil)))

  (use-package company-anaconda
    :after (company anaconda-mode)
    :init
    (add-hook 'anaconda-mode #'company-anaconda)
    (add-to-list 'company-backends 'company-anaconda))

  (use-package sage-shell-mode
    :ensure tree-sitter
    :init
    (add-to-list 'tree-sitter-major-mode-language-alist '(sage-shell:sage-mode . python))
    (add-hook 'sage-shell:sage-mode-hook #'tree-sitter-mode))
#+END_SRC

*** Javascript, Typescript, JSX, TSX, HTML, CSS
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode ("\\.tsx\\'"
           "\\.html?\\'"
           "\\.tpl\\.php\\'"
           "\\.[agj]sp\\'"
           "\\.erb\\'"
           "\\.mustache\\'")
    :init
    (setq sgml-basic-offset 4
          web-mode-markup-indent-offset 4
          web-mode-css-indent-offset 4
          web-mode-code-indent-offset 4
          web-mode-script-padding 4
          web-mode-block-padding 4
          web-mode-style-padding 4
          web-mode-enable-auto-quoting nil)
    (defun my/use-normal-pairs ()
      (interactive)
      (smartparens-strict-mode -1)
      (smartparens-mode -1)
      (show-smartparens-mode -1)
      (evil-smartparens-mode -1)
      (my/electric-pairs))
    (add-hook 'web-mode-hook #'my/use-normal-pairs))

  (use-package js
    :init
    (defun my/jsx-web-mode ()
      (interactive)
      (cl-letf (((symbol-function 'js-jsx--detect-and-enable) (lambda () t)))
        (web-mode)
        (web-mode-set-content-type "jsx")))
    (advice-add 'js-jsx-enable :override #'my/jsx-web-mode))

  (use-package typescript-mode)
#+END_SRC

** Post Initialization
Let's lower our GC thresholds back down to a sane level.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 16777216
      gc-cons-percentage 0.1)
#+END_SRC
